"use strict";(self.webpackChunklenguajes_estructurados=self.webpackChunklenguajes_estructurados||[]).push([[9186],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>v});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function u(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var i=r.createContext({}),s=function(e){var a=r.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},p=function(e){var a=s(e.components);return r.createElement(i.Provider,{value:a},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,l=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=s(n),m=t,v=c["".concat(i,".").concat(m)]||c[m]||d[m]||l;return n?r.createElement(v,o(o({ref:a},p),{},{components:n})):r.createElement(v,o({ref:a},p))}));function v(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=n.length,o=new Array(l);o[0]=m;var u={};for(var i in a)hasOwnProperty.call(a,i)&&(u[i]=a[i]);u.originalType=e,u[c]="string"==typeof e?e:t,o[1]=u;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2675:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>s});var r=n(7462),t=(n(7294),n(3905));const l={marp:!0,theme:"default",size:969,paginate:!0},o="02.03 - Punteros",u={unversionedId:"Lenguaje C/02.03_punteros",id:"Lenguaje C/02.03_punteros",title:"02.03 - Punteros",description:"Lenguajes Estructurados",source:"@site/docs/02 - Lenguaje C/02.03_punteros.md",sourceDirName:"02 - Lenguaje C",slug:"/Lenguaje C/02.03_punteros",permalink:"/lenguajes-estructurados/docs/Lenguaje C/02.03_punteros",draft:!1,editUrl:"https://github.com/abelranni/lenguajes-estructurados/tree/main/wewbsite/docs/02 - Lenguaje C/02.03_punteros.md",tags:[],version:"current",frontMatter:{marp:!0,theme:"default",size:969,paginate:!0},sidebar:"tutorialSidebar",previous:{title:"02.02 - Estructuras de datos",permalink:"/lenguajes-estructurados/docs/Lenguaje C/02.02_estructuras"},next:{title:"02.04 - Repaso de conceptos",permalink:"/lenguajes-estructurados/docs/Lenguaje C/02.04_repaso"}},i={},s=[{value:"Lenguajes Estructurados",id:"lenguajes-estructurados",level:2},{value:"\xbfQu\xe9 son los punteros?",id:"qu\xe9-son-los-punteros",level:2},{value:"\xbfC\xf3mo se declaran los punteros?",id:"c\xf3mo-se-declaran-los-punteros",level:2},{value:"\xbfC\xf3mo se inicializan los punteros?",id:"c\xf3mo-se-inicializan-los-punteros",level:2},{value:"\xbfC\xf3mo se accede al valor de una variable a trav\xe9s de un puntero?",id:"c\xf3mo-se-accede-al-valor-de-una-variable-a-trav\xe9s-de-un-puntero",level:2},{value:"\xbfC\xf3mo se modifica el valor de una variable a trav\xe9s de un puntero?",id:"c\xf3mo-se-modifica-el-valor-de-una-variable-a-trav\xe9s-de-un-puntero",level:2},{value:"\xbfC\xf3mo se pasan punteros a funciones?",id:"c\xf3mo-se-pasan-punteros-a-funciones",level:2},{value:"Pasar argumentos por referencia con punteros",id:"pasar-argumentos-por-referencia-con-punteros",level:2},{value:"\xbfC\xf3mo se retorna un puntero de una funci\xf3n?",id:"c\xf3mo-se-retorna-un-puntero-de-una-funci\xf3n",level:2},{value:"\xbfC\xf3mo se pasan arreglos a funciones?",id:"c\xf3mo-se-pasan-arreglos-a-funciones",level:2},{value:"\xbfC\xf3mo se retorna un arreglo de una funci\xf3n?",id:"c\xf3mo-se-retorna-un-arreglo-de-una-funci\xf3n",level:2},{value:"Ejemplo 1",id:"ejemplo-1",level:2},{value:"Ejemplo 2",id:"ejemplo-2",level:2}],p={toc:s},c="wrapper";function d(e){let{components:a,...n}=e;return(0,t.kt)(c,(0,r.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"0203---punteros"},"02.03 - Punteros"),(0,t.kt)("h2",{id:"lenguajes-estructurados"},"Lenguajes Estructurados"),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"qu\xe9-son-los-punteros"},"\xbfQu\xe9 son los punteros?"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Un puntero es una variable que almacena la direcci\xf3n de memoria de otra variable.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Los punteros permiten acceder y manipular indirectamente el contenido de otras variables en la memoria."))),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"c\xf3mo-se-declaran-los-punteros"},"\xbfC\xf3mo se declaran los punteros?"),(0,t.kt)("p",null,"Para declarar un puntero, utilizamos el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"*")," seguido del nombre de la variable."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"int *p;\n")),(0,t.kt)("h2",{id:"c\xf3mo-se-inicializan-los-punteros"},"\xbfC\xf3mo se inicializan los punteros?"),(0,t.kt)("p",null,"Para inicializar un puntero, utilizamos el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"&")," seguido del nombre de la variable."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"\nint x = 5;\nint *p = &x; // p es un puntero que apunta a la direcci\xf3n de memoria de x\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"c\xf3mo-se-accede-al-valor-de-una-variable-a-trav\xe9s-de-un-puntero"},"\xbfC\xf3mo se accede al valor de una variable a trav\xe9s de un puntero?"),(0,t.kt)("p",null,"Para acceder al valor de una variable a trav\xe9s de un puntero, utilizamos el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"*"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"int x = 5;\nint *p = &x;\nint y = *p;\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"c\xf3mo-se-modifica-el-valor-de-una-variable-a-trav\xe9s-de-un-puntero"},"\xbfC\xf3mo se modifica el valor de una variable a trav\xe9s de un puntero?"),(0,t.kt)("p",null,"Para modificar el valor de una variable a trav\xe9s de un puntero, utilizamos el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"*"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"int x = 5;\nint *p = &x;\n*p = 10;\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"c\xf3mo-se-pasan-punteros-a-funciones"},"\xbfC\xf3mo se pasan punteros a funciones?"),(0,t.kt)("p",null,"Para pasar un puntero a una funci\xf3n, utilizamos el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"*")," en la declaraci\xf3n de la funci\xf3n."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"void incrementar(int *p) {\n    *p = *p + 1;\n}\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"pasar-argumentos-por-referencia-con-punteros"},"Pasar argumentos por referencia con punteros"),(0,t.kt)("p",null,'Los punteros se pueden utilizar para pasar argumentos a funciones "por referencia" en lugar de "por valor".'),(0,t.kt)("p",null,"Al pasar un puntero a una funci\xf3n, la funci\xf3n puede modificar el valor de la variable original en lugar de trabajar con una copia local de la variable."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"void incrementar(int *num) {\n    (*num)++;\n}\n\nint main() {\n    int x = 0;\n    incrementar(&x); // x ahora vale 1\n\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"c\xf3mo-se-retorna-un-puntero-de-una-funci\xf3n"},"\xbfC\xf3mo se retorna un puntero de una funci\xf3n?"),(0,t.kt)("p",null,"Para retornar un puntero de una funci\xf3n, utilizamos el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"*")," en la declaraci\xf3n de la funci\xf3n."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"int *maximo(int *p1, int *p2) {\n    if (*p1 > *p2) {\n        return p1;\n    } else {\n        return p2;\n    }\n}\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"c\xf3mo-se-pasan-arreglos-a-funciones"},"\xbfC\xf3mo se pasan arreglos a funciones?"),(0,t.kt)("p",null,"Para pasar un arreglo a una funci\xf3n, no es necesario utilizar el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"*"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},'void imprimir_arreglo(int arreglo[], int tam) {\n    for (int i = 0; i < tam; i++) {\n        printf("%d ", arreglo[i]);\n    }\n    printf("\\n");\n}\n')),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"c\xf3mo-se-retorna-un-arreglo-de-una-funci\xf3n"},"\xbfC\xf3mo se retorna un arreglo de una funci\xf3n?"),(0,t.kt)("p",null,"Para retornar un arreglo de una funci\xf3n, no es necesario utilizar el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"*"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"\nint *maximos(int arreglo[], int tam) {\n    int *maximos = malloc(tam * sizeof(int));\n    for (int i = 0; i < tam; i++) {\n        maximos[i] = arreglo[i] * 2;\n    }\n    return maximos;\n}\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"ejemplo-1"},"Ejemplo 1"),(0,t.kt)("p",null,'Supongamos que tenemos una variable "x" y queremos modificar su valor en una funci\xf3n. Para hacer esto, podemos utilizar un puntero que apunte a la direcci\xf3n de memoria de la variable "x".'),(0,t.kt)("p",null,'Primero, definimos la variable "x" y la inicializamos con un valor.'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"int x = 10;\n")),(0,t.kt)("hr",null),(0,t.kt)("p",null,'Luego, definimos una funci\xf3n llamada "modificar_valor" que toma un puntero como argumento. Dentro de la funci\xf3n, podemos modificar el valor de la variable a la que apunta el puntero utilizando el operador de indirecci\xf3n "*".'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"void modificar_valor(int *p) {\n    *p = 20;\n}\n")),(0,t.kt)("hr",null),(0,t.kt)("p",null,'Para llamar a la funci\xf3n, podemos pasarle la direcci\xf3n de memoria de la variable "x" utilizando el operador de direcci\xf3n "&".'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"modificar_valor(&x);\n")),(0,t.kt)("p",null,'Despu\xe9s de llamar a la funci\xf3n, el valor de la variable "x" habr\xe1 cambiado a 20.'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},'printf("Valor de x: %d\\n", x);\n')),(0,t.kt)("hr",null),(0,t.kt)("p",null,"Podemos utilizar punteros en combinaci\xf3n con estructuras para acceder y modificar los campos de la estructura."),(0,t.kt)("p",null,'Por ejemplo, supongamos que tenemos una estructura "Persona" que contiene los campos "nombre", "edad" y "altura". Podemos crear una variable "persona1" de tipo "Persona" y utilizar un puntero para acceder y modificar los campos de la estructura.'),(0,t.kt)("hr",null),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},'struct Persona {\n    char nombre[50];\n    int edad;\n    float altura;\n};\nstruct Persona persona1 = {"Juan", 30, 1.75};\nstruct Persona *p = &persona1;\n\n(*p).edad = 35;\np->altura = 1.80;\n')),(0,t.kt)("p",null,'En este ejemplo, creamos un puntero "p" que apunta a la direcci\xf3n de memoria de la variable "persona1". Luego, utilizamos el operador de indirecci\xf3n "*" para acceder al contenido de la estructura y el operador de flecha "->" para acceder a los campos de la estructura.'),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"ejemplo-2"},"Ejemplo 2"),(0,t.kt)("p",null,"Invertir una cadena de caracteres utilizando punteros."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <string.h>\n\nvoid swap(char *a, char *b) {\n    char temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nvoid invertirCadena(char *cadena) {\n    int n = strlen(cadena);\n    for (int i = 0; i < n / 2; ++i) {\n        swap(&cadena[i], &cadena[n - i - 1]);\n    }\n}\n\nint main() {\n    char cadena[] = "Ingenier\xeda";\n    printf("Cadena original: %s\\n", cadena);\n\n    invertirCadena(cadena);\n    printf("Cadena invertida: %s\\n", cadena);\n\n    return 0;\n}\n')),(0,t.kt)("hr",null),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Este ejemplo muestra c\xf3mo se pueden utilizar punteros para manipular y modificar una cadena de caracteres.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Se usan punteros para pasar caracteres individuales a la funci\xf3n swap, que intercambia dos caracteres.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"La funci\xf3n invertirCadena utiliza punteros para acceder y modificar los caracteres en la cadena original."))),(0,t.kt)("hr",null))}d.isMDXComponent=!0}}]);