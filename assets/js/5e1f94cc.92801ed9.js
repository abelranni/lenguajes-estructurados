"use strict";(self.webpackChunklenguajes_estructurados=self.webpackChunklenguajes_estructurados||[]).push([[2385],{3905:(e,a,n)=>{n.d(a,{Zo:()=>s,kt:()=>k});var l=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function u(e,a){if(null==e)return{};var n,l,r=function(e,a){if(null==e)return{};var n,l,r={},t=Object.keys(e);for(l=0;l<t.length;l++)n=t[l],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(l=0;l<t.length;l++)n=t[l],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=l.createContext({}),o=function(e){var a=l.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},s=function(e){var a=o(e.components);return l.createElement(c.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},m=l.forwardRef((function(e,a){var n=e.components,r=e.mdxType,t=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=o(n),m=r,k=d["".concat(c,".").concat(m)]||d[m]||p[m]||t;return n?l.createElement(k,i(i({ref:a},s),{},{components:n})):l.createElement(k,i({ref:a},s))}));function k(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var t=n.length,i=new Array(t);i[0]=m;var u={};for(var c in a)hasOwnProperty.call(a,c)&&(u[c]=a[c]);u.originalType=e,u[d]="string"==typeof e?e:r,i[1]=u;for(var o=2;o<t;o++)i[o]=n[o];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},138:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>u,toc:()=>o});var l=n(7462),r=(n(7294),n(3905));const t={marp:!0,theme:"default",size:969,paginate:!0},i="03.05 -  TicTacToe",u={unversionedId:"Ejercicios Resueltos/03.05_tictactoe",id:"Ejercicios Resueltos/03.05_tictactoe",title:"03.05 -  TicTacToe",description:"Lenguajes Estructurados",source:"@site/docs/03 - Ejercicios Resueltos/03.05_tictactoe.md",sourceDirName:"03 - Ejercicios Resueltos",slug:"/Ejercicios Resueltos/03.05_tictactoe",permalink:"/lenguajes-estructurados/docs/Ejercicios Resueltos/03.05_tictactoe",draft:!1,editUrl:"https://github.com/abelranni/lenguajes-estructurados/tree/main/docs/03 - Ejercicios Resueltos/03.05_tictactoe.md",tags:[],version:"current",frontMatter:{marp:!0,theme:"default",size:969,paginate:!0},sidebar:"tutorialSidebar",previous:{title:"03.03.B - Snake en Python",permalink:"/lenguajes-estructurados/docs/Ejercicios Resueltos/03.03.B_snake_py"}},c={},o=[{value:"Lenguajes Estructurados",id:"lenguajes-estructurados",level:2},{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Especificaciones",id:"especificaciones",level:2},{value:"Requisitos previos",id:"requisitos-previos",level:2},{value:"Compilaci\xf3n del programa",id:"compilaci\xf3n-del-programa",level:2},{value:"Explicaci\xf3n del c\xf3digo",id:"explicaci\xf3n-del-c\xf3digo",level:2},{value:"Inclusi\xf3n de bibliotecas",id:"inclusi\xf3n-de-bibliotecas",level:3},{value:"variables globales",id:"variables-globales",level:3},{value:"Funciones auxiliares",id:"funciones-auxiliares",level:3},{value:"Funci\xf3n principal - WinMain()",id:"funci\xf3n-principal---winmain",level:3},{value:"Funci\xf3n load_texture()",id:"funci\xf3n-load_texture",level:3},{value:"Funci\xf3n add_piece()",id:"funci\xf3n-add_piece",level:3},{value:"Funci\xf3n init()",id:"funci\xf3n-init",level:3},{value:"Funci\xf3n clean_up()",id:"funci\xf3n-clean_up",level:3},{value:"Funci\xf3n draw_piece()",id:"funci\xf3n-draw_piece",level:3},{value:"Funci\xf3n draw_board()",id:"funci\xf3n-draw_board",level:3},{value:"Funci\xf3n WinMain()",id:"funci\xf3n-winmain",level:3}],s={toc:o},d="wrapper";function p(e){let{components:a,...n}=e;return(0,r.kt)(d,(0,l.Z)({},s,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0305----tictactoe"},"03.05 -  TicTacToe"),(0,r.kt)("h2",{id:"lenguajes-estructurados"},"Lenguajes Estructurados"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,r.kt)("p",null,"El objetivo de este trabajo pr\xe1ctico es desarrollar un juego de tres en raya utilizando la biblioteca gr\xe1fica SDL2."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"especificaciones"},"Especificaciones"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"El juego debe permitir jugar contra la computadora o contra otro jugador.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"El juego debe permitir elegir el s\xedmbolo que utilizar\xe1 cada jugador (X, O, etc.)."))),(0,r.kt)("h2",{id:"requisitos-previos"},"Requisitos previos"),(0,r.kt)("p",null,"Tener instalado un compilador de C, como GCC (GNU Compiler Collection), en tu sistema.\nInstala las siguientes bibliotecas SDL:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"SDL2"),(0,r.kt)("li",{parentName:"ul"},"SDL2_image"),(0,r.kt)("li",{parentName:"ul"},"SDL2_ttf")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Para instalar las bibliotecas en sistemas basados en Debian/Ubuntu, ejecuta los siguientes comandos:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt-get update\nsudo apt-get install libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev\n")),(0,r.kt)("h2",{id:"compilaci\xf3n-del-programa"},"Compilaci\xf3n del programa"),(0,r.kt)("p",null,"Para compilar el programa, ejecuta el siguiente comando en la terminal desde el directorio donde se encuentra el archivo ttt.c:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"gcc .\\ttt.c -o ttt.exe -lSDL2 -lSDL2_ttf -lSDL2_image\n")),(0,r.kt)("p",null,"Esto generar\xe1 un ejecutable llamado ttt.exe."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"explicaci\xf3n-del-c\xf3digo"},"Explicaci\xf3n del c\xf3digo"),(0,r.kt)("h3",{id:"inclusi\xf3n-de-bibliotecas"},"Inclusi\xf3n de bibliotecas"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"#include <SDL2/SDL.h>\n#include <SDL2/SDL_image.h>\n#include <SDL2/SDL_ttf.h>\n#include <stdio.h>\n")),(0,r.kt)("p",null,"Se incluyen las bibliotecas necesarias para utilizar SDL2, SDL_image y SDL_ttf. Tambi\xe9n se incluye la biblioteca est\xe1ndar de E/S para imprimir mensajes de error si los hubiera."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"variables-globales"},"variables globales"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"const int SCREEN_WIDTH = 640;\nconst int SCREEN_HEIGHT = 480;\n\nSDL_Window *window = NULL;\nSDL_Renderer *renderer = NULL;\n\nint board[3][3] = {0};\n\nSDL_Texture *player1_texture = NULL;\nSDL_Texture *player2_texture = NULL;\n")),(0,r.kt)("p",null,"Se declaran las constantes para el ancho y alto de la pantalla, as\xed como las variables globales para la ventana y el renderizador de SDL. Tambi\xe9n se declara una matriz 3x3 llamada board que representa el estado del tablero y las texturas para las fichas de los jugadores 1 y 2."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"funciones-auxiliares"},"Funciones auxiliares"),(0,r.kt)("p",null,"El programa incluye varias funciones auxiliares, como load_texture(), add_piece(), init(), clean_up(), draw_piece() y draw_board().\nEstas funciones se utilizan para cargar texturas, agregar fichas al tablero, inicializar y limpiar recursos SDL, y dibujar las piezas y el tablero en la pantalla."),(0,r.kt)("h3",{id:"funci\xf3n-principal---winmain"},"Funci\xf3n principal - WinMain()"),(0,r.kt)("p",null,"La funci\xf3n principal WinMain() inicializa SDL y las bibliotecas auxiliares, carga las texturas de las fichas y entra en un bucle principal. En este bucle, se manejan los eventos de entrada del usuario y se dibuja el tablero en la pantalla."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"El bucle principal maneja eventos de cierre de ventana y eventos de clic del rat\xf3n."),(0,r.kt)("p",null,"Cuando se detecta un clic del rat\xf3n, se calcula la posici\xf3n del tablero en la que se hizo clic y se intenta agregar una ficha en esa posici\xf3n."),(0,r.kt)("p",null,"Si se puede agregar una ficha, el jugador actual cambia al otro jugador."),(0,r.kt)("p",null,"Finalmente, se llama a clean_up() para liberar los recursos de SDL antes de que el programa termine"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"funci\xf3n-load_texture"},"Funci\xf3n load_texture()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'SDL_Texture *load_texture(const char *path)\n{\n    SDL_Surface *loaded_surface = IMG_Load(path);\n    if (!loaded_surface)\n    {\n        printf("Error al cargar la imagen %s: %s\\n", path, IMG_GetError());\n        return NULL;\n    }\n\n    SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, loaded_surface);\n    if (!texture)\n    {\n        printf("Error al crear la textura a partir de %s: %s\\n", path, SDL_GetError());\n    }\n\n    SDL_FreeSurface(loaded_surface);\n\n    return texture;\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"SDL_Texture *load_texture(const char *path)\n")),(0,r.kt)("p",null,"Descripci\xf3n: Carga una textura desde un archivo de imagen."),(0,r.kt)("p",null,"Argumentos:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"const char *path: Ruta al archivo de imagen.")),(0,r.kt)("p",null,"Valor de retorno:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Un puntero a la textura cargada o NULL si hay un error.")),(0,r.kt)("p",null,"Detalles de implementaci\xf3n:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Carga la superficie de la imagen utilizando IMG_Load()."),(0,r.kt)("li",{parentName:"ul"},"Crea una textura a partir de la superficie cargada utilizando SDL_CreateTextureFromSurface()."),(0,r.kt)("li",{parentName:"ul"},"Libera la superficie cargada utilizando SDL_FreeSurface()."),(0,r.kt)("li",{parentName:"ul"},"Retorna la textura creada.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"funci\xf3n-add_piece"},"Funci\xf3n add_piece()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"\nint add_piece(int x, int y, int player)\n{\n    if (x < 0 || x > 2 || y < 0 || y > 2)\n    {\n        return 0;\n    }\n\n    if (board[x][y] != 0)\n    {\n        return 0;\n    }\n\n    board[x][y] = player;\n\n    return 1;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int add_piece(int x, int y, int player)\n")),(0,r.kt)("p",null,"Descripci\xf3n: Agrega una ficha en la posici\xf3n (x, y) del tablero."),(0,r.kt)("p",null,"Argumentos:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"int x: Coordenada X de la posici\xf3n del tablero."),(0,r.kt)("li",{parentName:"ul"},"int y: Coordenada Y de la posici\xf3n del tablero."),(0,r.kt)("li",{parentName:"ul"},"int player: N\xfamero del jugador (1 o 2).")),(0,r.kt)("p",null,"Valor de retorno:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1 si se pudo agregar la ficha"),(0,r.kt)("li",{parentName:"ul"},"0 en caso contrario.")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Detalles de implementaci\xf3n:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Verifica si las coordenadas (x, y) est\xe1n dentro del rango del tablero y si la casilla est\xe1 vac\xeda."),(0,r.kt)("li",{parentName:"ul"},"Si se cumplen las condiciones, coloca la ficha del jugador en la posici\xf3n (x, y) y retorna 1."),(0,r.kt)("li",{parentName:"ul"},"Si no se cumplen las condiciones, retorna 0")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"funci\xf3n-init"},"Funci\xf3n init()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'\nint init()\n{\n    if (SDL_Init(SDL_INIT_VIDEO) < 0) {\n        printf("Error al inicializar SDL: %s\\n", SDL_GetError());\n        return 0;\n    }\n    window = SDL_CreateWindow("Tateti", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);\n    if (!window) {\n        printf("Error al crear la ventana: %s\\n", SDL_GetError());\n        return 0;\n    }\n    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);\n    if (!renderer) {\n        printf("Error al crear el renderizador: %s\\n", SDL_GetError());\n        return 0;\n    }\n    if (IMG_Init(IMG_INIT_PNG) != IMG_INIT_PNG) {\n        printf("Error al inicializar SDL_image: %s\\n", IMG_GetError());\n        return 0;\n    }\n    if (TTF_Init() < 0) {\n        printf("Error al inicializar SDL_ttf: %s\\n", TTF_GetError());\n        return 0;\n    }\n    return 1;\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int init()\n")),(0,r.kt)("p",null,"Descripci\xf3n: Inicializa SDL y las bibliotecas auxiliares."),(0,r.kt)("p",null,"Valor de retorno:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1 si la inicializaci\xf3n fue exitosa"),(0,r.kt)("li",{parentName:"ul"},"0 en caso contrario.")),(0,r.kt)("p",null,"Detalles de implementaci\xf3n:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Inicializa SDL con el subsistema de video."),(0,r.kt)("li",{parentName:"ul"},"Crea la ventana SDL."),(0,r.kt)("li",{parentName:"ul"},"Crea el renderizador SDL."),(0,r.kt)("li",{parentName:"ul"},"Inicializa SDL_image con soporte para im\xe1genes PNG."),(0,r.kt)("li",{parentName:"ul"},"Inicializa SDL_ttf.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"funci\xf3n-clean_up"},"Funci\xf3n clean_up()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"\nvoid clean_up()\n{\n    SDL_DestroyTexture(player1_texture);\n    SDL_DestroyTexture(player2_texture);\n    SDL_DestroyRenderer(renderer);\n    SDL_DestroyWindow(window);\n    IMG_Quit();\n    SDL_Quit();\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void clean_up()\n")),(0,r.kt)("p",null,"Descripci\xf3n: Libera los recursos de SDL y las bibliotecas auxiliares."),(0,r.kt)("p",null,"Detalles de implementaci\xf3n:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Destruye el renderizador y la ventana de SDL."),(0,r.kt)("li",{parentName:"ul"},"Finaliza SDL_ttf, SDL_image y SDL.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"funci\xf3n-draw_piece"},"Funci\xf3n draw_piece()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"\nvoid draw_piece(int x, int y, int player)\n{\n    SDL_Rect dest_rect;\n    dest_rect.x = x * (SCREEN_WIDTH / 3) + (SCREEN_WIDTH / 6);\n    dest_rect.y = y * (SCREEN_HEIGHT / 3) + (SCREEN_HEIGHT / 6);\n    dest_rect.w = 32;\n    dest_rect.h = 32;\n\n    SDL_RenderCopy(renderer, texture, NULL, &dest_rect);\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"\nvoid draw_piece(SDL_Texture *texture, int x, int y)\n")),(0,r.kt)("p",null,"Descripci\xf3n: Dibuja una ficha en la posici\xf3n (x, y) del tablero."),(0,r.kt)("p",null,"Argumentos:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"SDL_Texture *texture: Textura de la ficha a dibujar."),(0,r.kt)("li",{parentName:"ul"},"int x: Coordenada X de la posici\xf3n del tablero."),(0,r.kt)("li",{parentName:"ul"},"int y: Coordenada Y de la posici\xf3n del tablero.")),(0,r.kt)("p",null,"Detalles de implementaci\xf3n:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Establece las coordenadas y el tama\xf1o del rect\xe1ngulo de destino en funci\xf3n de las coordenadas del tablero y el tama\xf1o de la pantalla."),(0,r.kt)("li",{parentName:"ul"},"Copia la textura en el rect\xe1ngulo de destino utilizando SDL_RenderCopy().")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"funci\xf3n-draw_board"},"Funci\xf3n draw_board()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"\nvoid draw_board()\n{\n    SDL_SetRenderDrawColor(renderer, 0xFF, 0xFF, 0xFF, 0xFF);\n    SDL_RenderClear(renderer);\n\n    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0xFF);\n    for (int i = 1; i < 3; ++i)\n    {\n        SDL_RenderDrawLine(renderer, i * SCREEN_WIDTH / 3, 0, i * SCREEN_WIDTH / 3, SCREEN_HEIGHT);\n        SDL_RenderDrawLine(renderer, 0, i * SCREEN_HEIGHT / 3, SCREEN_WIDTH, i * SCREEN_HEIGHT / 3);\n    }\n\n    // Dibujar las fichas en el tablero\n    for (int i = 0; i < 3; ++i)\n    {\n        for (int j = 0; j < 3; ++j)\n        {\n            if (board[i][j] == 1)\n            {\n                draw_piece(player1_texture, i, j);\n            }\n            else if (board[i][j] == 2)\n            {\n                draw_piece(player2_texture, i, j);\n            }\n        }\n    }\n\n    SDL_RenderPresent(renderer);\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void draw_board()\n")),(0,r.kt)("p",null,"Descripci\xf3n: Dibuja el tablero y las fichas en la pantalla."),(0,r.kt)("p",null,"Detalles de implementaci\xf3n:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Establece el color de fondo y borra la pantalla utilizando SDL_RenderClear()."),(0,r.kt)("li",{parentName:"ul"},"Establece el color de las l\xedneas del tablero y dibuja las l\xedneas utilizando SDL_RenderDrawLine()."),(0,r.kt)("li",{parentName:"ul"},"Itera a trav\xe9s de todas las posiciones del tablero y dibuja las fichas de los jugadores utilizando draw_piece():"),(0,r.kt)("li",{parentName:"ul"},"Si board","[i][j]"," es 1, dibuja la ficha del jugador 1 en la posici\xf3n (i, j)."),(0,r.kt)("li",{parentName:"ul"},"Si board","[i][j]"," es 2, dibuja la ficha del jugador 2 en la posici\xf3n (i, j)."),(0,r.kt)("li",{parentName:"ul"},"Actualiza la pantalla utilizando SDL_RenderPresent().")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"funci\xf3n-winmain"},"Funci\xf3n WinMain()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'int WinMain(int argc, char *args[])\n{\n    if (!init()) {\n        printf("Error al inicializar.\\n");\n    }\n    else {\n        player1_texture = load_texture("rojo.png");\n        player2_texture = load_texture("verde.png");\n        if (!player1_texture || !player2_texture) {\n            printf("Error al cargar las texturas de las fichas.\\n");\n        }\n        else {\n            int quit = 0;\n            SDL_Event e;\n            int currentPlayer = 1;\n\n            while (!quit)\n            {\n                while (SDL_PollEvent(&e) != 0)\n                {\n                    if (e.type == SDL_QUIT) {\n                        quit = 1;\n                    }\n                    if (e.type == SDL_MOUSEBUTTONDOWN) {\n                        int x = e.button.x / (SCREEN_WIDTH / 3);\n                        int y = e.button.y / (SCREEN_HEIGHT / 3);\n                        if (add_piece(x, y, currentPlayer)) {\n                            currentPlayer = (currentPlayer == 1) ? 2 : 1; // Cambiar el jugador actual\n                        }\n                    }\n                }\n                draw_board();\n                SDL_RenderPresent(renderer);\n            }\n        }\n    }\n    clean_up();\n    return 0;\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int WinMain()\n")),(0,r.kt)("p",null,"Descripci\xf3n: La funci\xf3n principal del programa."),(0,r.kt)("p",null,"Detalles de implementaci\xf3n:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Llama a init() para inicializar SDL y las bibliotecas auxiliares."),(0,r.kt)("li",{parentName:"ul"},"Carga las texturas de las fichas de los jugadores 1 y 2 utilizando load_texture().")),(0,r.kt)("hr",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Si las texturas se cargaron correctamente, entra en un bucle principal:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Maneja los eventos de entrada del usuario utilizando SDL_PollEvent():",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Si el evento es de tipo SDL_QUIT, establece quit en 1 para salir del bucle principal."),(0,r.kt)("li",{parentName:"ul"},"Si el evento es de tipo SDL_MOUSEBUTTONDOWN, calcula la posici\xf3n del tablero en la que se hizo clic y llama a add_piece() para agregar una ficha en esa posici\xf3n. "),(0,r.kt)("li",{parentName:"ul"},"Si se pudo agregar una ficha, cambia el jugador actual al otro jugador."))),(0,r.kt)("li",{parentName:"ul"},"Llama a draw_board() para dibujar el tablero y las fichas en la pantalla."),(0,r.kt)("li",{parentName:"ul"},"Actualiza la pantalla utilizando SDL_RenderPresent()."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Llama a clean_up() para liberar los recursos de SDL antes de que el programa termine."))),(0,r.kt)("hr",null))}p.isMDXComponent=!0}}]);