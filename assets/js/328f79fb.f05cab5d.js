"use strict";(self.webpackChunklenguajes_estructurados=self.webpackChunklenguajes_estructurados||[]).push([[3180],{3905:(e,a,r)=>{r.d(a,{Zo:()=>u,kt:()=>g});var n=r(7294);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function i(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?i(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function c(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=n.createContext({}),s=function(e){var a=n.useContext(l),r=a;return e&&(r="function"==typeof e?e(a):o(o({},a),e)),r},u=function(e){var a=s(e.components);return n.createElement(l.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(r),m=t,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(g,o(o({ref:a},u),{},{components:r})):n.createElement(g,o({ref:a},u))}));function g(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=r.length,o=new Array(i);o[0]=m;var c={};for(var l in a)hasOwnProperty.call(a,l)&&(c[l]=a[l]);c.originalType=e,c[d]="string"==typeof e?e:t,o[1]=c;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},624:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var n=r(7462),t=(r(7294),r(3905));const i={marp:!0,theme:"default",size:969,paginate:!0},o="01.01 - Programaci\xf3n Estructurada",c={unversionedId:"Introduccion/01.01_programacion_estructurada",id:"Introduccion/01.01_programacion_estructurada",title:"01.01 - Programaci\xf3n Estructurada",description:"Introducci\xf3n",source:"@site/docs/01 - Introduccion/01.01_programacion_estructurada.md",sourceDirName:"01 - Introduccion",slug:"/Introduccion/01.01_programacion_estructurada",permalink:"/lenguajes-estructurados/docs/Introduccion/01.01_programacion_estructurada",draft:!1,editUrl:"https://github.com/abelranni/lenguajes-estructurados/tree/main/wewbsite/docs/01 - Introduccion/01.01_programacion_estructurada.md",tags:[],version:"current",frontMatter:{marp:!0,theme:"default",size:969,paginate:!0},sidebar:"tutorialSidebar",previous:{title:"01 - Introducci\xf3n",permalink:"/lenguajes-estructurados/docs/category/01---introducci\xf3n"},next:{title:"01.02 - Buenas pr\xe1cticas",permalink:"/lenguajes-estructurados/docs/Introduccion/01.02_buenas_practicas"}},l={},s=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Modularidad",id:"modularidad",level:2},{value:"Abstracci\xf3n",id:"abstracci\xf3n",level:2},{value:"Recursividad",id:"recursividad",level:2},{value:"Ventajas de la programaci\xf3n estructurada",id:"ventajas-de-la-programaci\xf3n-estructurada",level:2},{value:"Buenas pr\xe1cticas",id:"buenas-pr\xe1cticas",level:2},{value:"Comentar el c\xf3digo",id:"comentar-el-c\xf3digo",level:3},{value:"Utilizar nombres descriptivos",id:"utilizar-nombres-descriptivos",level:3},{value:"Evitar c\xf3digo redundante",id:"evitar-c\xf3digo-redundante",level:3},{value:"Evitar anidar estructuras de control de flujo",id:"evitar-anidar-estructuras-de-control-de-flujo",level:3},{value:"Usar constantes y enumeraciones",id:"usar-constantes-y-enumeraciones",level:3},{value:"Hacer pruebas",id:"hacer-pruebas",level:3}],u={toc:s},d="wrapper";function p(e){let{components:a,...r}=e;return(0,t.kt)(d,(0,n.Z)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"0101---programaci\xf3n-estructurada"},"01.01 - Programaci\xf3n Estructurada"),(0,t.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,t.kt)("hr",null),(0,t.kt)("p",null,"La programaci\xf3n estructurada es un enfoque de programaci\xf3n que se centra en la organizaci\xf3n l\xf3gica y clara del c\xf3digo. Se basa en tres principios clave:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Secuencialidad: el c\xf3digo se ejecuta en orden secuencial, de arriba a abajo."),(0,t.kt)("li",{parentName:"ul"},'Selecci\xf3n: se utilizan estructuras de control de flujo, como "if" y "switch", para tomar decisiones y ejecutar diferentes bloques de c\xf3digo en funci\xf3n de una condici\xf3n.'),(0,t.kt)("li",{parentName:"ul"},'Iteraci\xf3n: se utilizan bucles, como "for" y "while", para repetir bloques de c\xf3digo varias veces.')),(0,t.kt)("hr",null),(0,t.kt)("p",null,'La programaci\xf3n estructurada se considera una alternativa a la programaci\xf3n no estructurada, que se basa en la ejecuci\xf3n de saltos incondicionales y "goto".'),(0,t.kt)("h2",{id:"modularidad"},"Modularidad"),(0,t.kt)("p",null,"La programaci\xf3n estructurada tambi\xe9n se enfoca en la modularidad, lo que significa que el c\xf3digo se divide en m\xf3dulos o funciones m\xe1s peque\xf1as y manejables. Esto ayuda a simplificar el proceso de desarrollo, mantenimiento y depuraci\xf3n del c\xf3digo. Adem\xe1s, los m\xf3dulos o funciones pueden ser reutilizados en diferentes partes del programa o en diferentes programas."),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"abstracci\xf3n"},"Abstracci\xf3n"),(0,t.kt)("p",null,"Otro aspecto importante de la programaci\xf3n estructurada es la abstracci\xf3n. La abstracci\xf3n se refiere a la capacidad de ignorar los detalles innecesarios de una tarea y concentrarse en los aspectos relevantes. En programaci\xf3n, esto se logra utilizando funciones y variables con nombres descriptivos y con un prop\xf3sito espec\xedfico, lo que hace que el c\xf3digo sea m\xe1s f\xe1cil de leer y entender."),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"recursividad"},"Recursividad"),(0,t.kt)("p",null,"La recursividad es una t\xe9cnica com\xfanmente utilizada en programaci\xf3n estructurada, en la que una funci\xf3n se llama a s\xed misma de forma repetida hasta que se cumple una condici\xf3n de salida. La recursividad se utiliza com\xfanmente en algoritmos que requieren la repetici\xf3n de un proceso hasta que se alcanza un resultado final, como la b\xfasqueda en profundidad de un \xe1rbol."),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"ventajas-de-la-programaci\xf3n-estructurada"},"Ventajas de la programaci\xf3n estructurada"),(0,t.kt)("p",null,"La programaci\xf3n estructurada tiene varias ventajas sobre la programaci\xf3n no estructurada, incluyendo:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Facilidad de lectura y comprensi\xf3n del c\xf3digo"),(0,t.kt)("li",{parentName:"ul"},"Mayor modularidad y reutilizaci\xf3n de c\xf3digo"),(0,t.kt)("li",{parentName:"ul"},"Facilidad de mantenimiento y depuraci\xf3n del c\xf3digo"),(0,t.kt)("li",{parentName:"ul"},"Mayor fiabilidad y seguridad del c\xf3digo"),(0,t.kt)("li",{parentName:"ul"},"Mejora en la eficiencia y velocidad de ejecuci\xf3n del c\xf3digo")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"buenas-pr\xe1cticas"},"Buenas pr\xe1cticas"),(0,t.kt)("h3",{id:"comentar-el-c\xf3digo"},"Comentar el c\xf3digo"),(0,t.kt)("p",null,"Es importante incluir comentarios en el c\xf3digo para que otros programadores (y t\xfa mismo en el futuro) puedan entender f\xe1cilmente lo que hace cada parte del c\xf3digo. Los comentarios deben ser claros y concisos, y deben describir lo que hace el c\xf3digo, no c\xf3mo lo hace."),(0,t.kt)("hr",null),(0,t.kt)("h3",{id:"utilizar-nombres-descriptivos"},"Utilizar nombres descriptivos"),(0,t.kt)("p",null,"Es importante utilizar nombres de variables y funciones que sean descriptivos y f\xe1ciles de entender. Los nombres deben reflejar el prop\xf3sito y la funci\xf3n de la variable o la funci\xf3n. Esto hace que el c\xf3digo sea m\xe1s f\xe1cil de leer y entender."),(0,t.kt)("h3",{id:"evitar-c\xf3digo-redundante"},"Evitar c\xf3digo redundante"),(0,t.kt)("p",null,"El c\xf3digo redundante es aquel que se repite innecesariamente en diferentes partes del programa. Esto puede hacer que el c\xf3digo sea m\xe1s dif\xedcil de mantener y modificar. Es importante identificar y eliminar cualquier c\xf3digo redundante, y reutilizar c\xf3digo existente en lugar de volver a escribirlo."),(0,t.kt)("hr",null),(0,t.kt)("h3",{id:"evitar-anidar-estructuras-de-control-de-flujo"},"Evitar anidar estructuras de control de flujo"),(0,t.kt)("p",null,'Anidar demasiadas estructuras de control de flujo, como "if" y "while", puede hacer que el c\xf3digo sea dif\xedcil de leer y entender. Es mejor mantener las estructuras de control de flujo simples y evitar anidarlas demasiado.'),(0,t.kt)("h3",{id:"usar-constantes-y-enumeraciones"},"Usar constantes y enumeraciones"),(0,t.kt)("p",null,"Es importante utilizar constantes y enumeraciones en lugar de valores literales en el c\xf3digo. Las constantes y enumeraciones hacen que el c\xf3digo sea m\xe1s legible y f\xe1cil de mantener, y tambi\xe9n hacen que sea m\xe1s f\xe1cil cambiar los valores en un solo lugar en el futuro."),(0,t.kt)("hr",null),(0,t.kt)("h3",{id:"hacer-pruebas"},"Hacer pruebas"),(0,t.kt)("p",null,"Finalmente, es importante probar el c\xf3digo para asegurarse de que funcione correctamente antes de entregarlo. Las pruebas deben cubrir todas las partes del c\xf3digo y deben incluir casos l\xedmite y casos de error. Esto ayuda a garantizar que el c\xf3digo sea confiable y funcione correctamente en todas las situaciones."))}p.isMDXComponent=!0}}]);