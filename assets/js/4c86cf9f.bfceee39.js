"use strict";(self.webpackChunklenguajes_estructurados=self.webpackChunklenguajes_estructurados||[]).push([[4024],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,r,i=function(e,a){if(null==e)return{};var n,r,i={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var a=r.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=u(e.components);return r.createElement(s.Provider,{value:a},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var n=e.components,i=e.mdxType,t=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||t;return n?r.createElement(f,l(l({ref:a},c),{},{components:n})):r.createElement(f,l({ref:a},c))}));function f(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var t=n.length,l=new Array(t);l[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<t;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3759:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const t={marp:!0,theme:"default",size:969,paginate:!0},l="01.03 - Principios de C\xf3digo Limpio",o={unversionedId:"Introduccion/01.03_dry_etc",id:"Introduccion/01.03_dry_etc",title:"01.03 - Principios de C\xf3digo Limpio",description:"Lenguajes Estructurados",source:"@site/docs/01 - Introduccion/01.03_dry_etc.md",sourceDirName:"01 - Introduccion",slug:"/Introduccion/01.03_dry_etc",permalink:"/lenguajes-estructurados/docs/Introduccion/01.03_dry_etc",draft:!1,editUrl:"https://github.com/abelranni/lenguajes-estructurados/tree/main/docs/01 - Introduccion/01.03_dry_etc.md",tags:[],version:"current",frontMatter:{marp:!0,theme:"default",size:969,paginate:!0},sidebar:"tutorialSidebar",previous:{title:"01.02 - Buenas pr\xe1cticas",permalink:"/lenguajes-estructurados/docs/Introduccion/01.02_buenas_practicas"},next:{title:"02 - Lenguaje C",permalink:"/lenguajes-estructurados/docs/category/02---lenguaje-c"}},s={},u=[{value:"Lenguajes Estructurados",id:"lenguajes-estructurados",level:2},{value:"Agenda",id:"agenda",level:2},{value:"Introducci\xf3n a las buenas pr\xe1cticas",id:"introducci\xf3n-a-las-buenas-pr\xe1cticas",level:2},{value:"ETC es un valor, no una regla",id:"etc-es-un-valor-no-una-regla",level:3},{value:"DRY: los males de la duplicaci\xf3n",id:"dry-los-males-de-la-duplicaci\xf3n",level:2},{value:"DRY es m\xe1s que c\xf3digo",id:"dry-es-m\xe1s-que-c\xf3digo",level:3},{value:"Resumen",id:"resumen",level:2},{value:"Principio DRY (Don&#39;t Repeat Yourself)",id:"principio-dry-dont-repeat-yourself",level:3},{value:"Principio ETC (Easy to Change)",id:"principio-etc-easy-to-change",level:3},{value:"Ejemplos y aplicaciones",id:"ejemplos-y-aplicaciones",level:2},{value:"DRY",id:"dry",level:3},{value:"ETC",id:"etc",level:3},{value:"Ejemplo de aplicaci\xf3n de DRY",id:"ejemplo-de-aplicaci\xf3n-de-dry",level:2},{value:"Identificar la duplicaci\xf3n de c\xf3digo y refactorizarlo para evitarla",id:"identificar-la-duplicaci\xf3n-de-c\xf3digo-y-refactorizarlo-para-evitarla",level:3}],c={toc:u},p="wrapper";function d(e){let{components:a,...n}=e;return(0,i.kt)(p,(0,r.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0103---principios-de-c\xf3digo-limpio"},"01.03 - Principios de C\xf3digo Limpio"),(0,i.kt)("h2",{id:"lenguajes-estructurados"},"Lenguajes Estructurados"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"agenda"},"Agenda"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Introducci\xf3n a las buenas pr\xe1cticas"),(0,i.kt)("li",{parentName:"ol"},"Principio DRY (Don't Repeat Yourself)"),(0,i.kt)("li",{parentName:"ol"},"Principio ETC (Easy to Change)"),(0,i.kt)("li",{parentName:"ol"},"Ejemplos y aplicaciones"),(0,i.kt)("li",{parentName:"ol"},"Conclusiones y consejos finales")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"introducci\xf3n-a-las-buenas-pr\xe1cticas"},"Introducci\xf3n a las buenas pr\xe1cticas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Las ",(0,i.kt)("strong",{parentName:"li"},"buenas pr\xe1cticas")," son h\xe1bitos y t\xe9cnicas que facilitan el desarrollo de software."),(0,i.kt)("li",{parentName:"ul"},"Ayudan a crear c\xf3digo m\xe1s legible, mantenible y eficiente."),(0,i.kt)("li",{parentName:"ul"},"Dos principios importantes son DRY y ETC.")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Una cosa est\xe1 bien dise\xf1ada si se adapta a las personas que la utilizan."),(0,i.kt)("p",null,"Para el c\xf3digo, eso significa que debe adaptarse cambiando, as\xed que creemos en el principio ",(0,i.kt)("inlineCode",{parentName:"p"},"ETC: Easier to Change"),", m\xe1s f\xe1cil de cambiar."),(0,i.kt)("p",null,"ETC es la base fundamental. Cualquier principio de dise\xf1o que existe puede considerarse un caso especial del ETC."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\xbfPor qu\xe9 es bueno el desacoplamiento? Porque al aislar los intereses hacemos que sea m\xe1s f\xe1cil cambiar. ETC.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\xbfPor qu\xe9 es \xfatil el principio de responsabilidad \xfanica? Porque un cambio en los requisitos se corresponde con un cambio en un solo m\xf3dulo. ETC.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\xbfPor qu\xe9 es importante el momento de poner nombres? Porque los buenos nombres hacen que el c\xf3digo sea m\xe1s f\xe1cil de leer, y hay que leerlo para cambiarlo. \xa1ETC!"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"etc-es-un-valor-no-una-regla"},"ETC es un valor, no una regla"),(0,i.kt)("p",null,"Los valores son cosas que nos ayudan a tomar decisiones: \xbfdeber\xeda hacer esto o aquello?"),(0,i.kt)("p",null,"A la hora de pensar en el software, ETC es una gu\xeda que nos ayuda a elegir entre varios caminos."),(0,i.kt)("p",null,"Al igual que todos los dem\xe1s valores, deber\xeda estar siempre presente en el pensamiento consciente, empuj\xe1ndonos de manera sutil en la direcci\xf3n correcta."),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Hay una premisa impl\xedcita en ETC"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Asume que una persona puede decir cu\xe1l entre muchos caminos de implementaci\xf3n ser\xe1 m\xe1s f\xe1cil de cambiar en el futuro.")),(0,i.kt)("p",null,"A veces no es tan evidente esta decisi\xf3n. En esos casos, se pueden hacer dos cosas:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Primero, dado que no estamos seguros de qu\xe9 forma adoptar\xe1 el cambio, siempre podemos ir por el camino definitivo del "f\xe1cil de cambiar"',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"intentar hacer que lo que escriba sea sustituible"),(0,i.kt)("li",{parentName:"ul"},"De ese modo, pase lo que pase en el futuro, esta porci\xf3n de c\xf3digo no ser\xe1 un obst\xe1culo en el camino"),(0,i.kt)("li",{parentName:"ul"},"Se trata solo de pensar en mantener el c\xf3digo desacoplado y cohesivo.")))),(0,i.kt)("hr",null),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Segundo, considar esto como una manera de desarrollar el instinto.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Tomar nota de la situaci\xf3n, las opciones que tiene y algunas conjeturas sobre el cambio."),(0,i.kt)("li",{parentName:"ul"},"Dejar una etiqueta en el c\xf3digo fuente."),(0,i.kt)("li",{parentName:"ul"},"M\xe1s adelante, cuando este c\xf3digo tenga que cambiar, podremos echar la vista atr\xe1s y encontrar feedback de nosotros mismos."),(0,i.kt)("li",{parentName:"ul"},"Adem\xe1s, puede que esto ayude la pr\xf3xima vez que nos encuentremos con una bifurcaci\xf3n similar en el camino.")))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"dry-los-males-de-la-duplicaci\xf3n"},"DRY: los males de la duplicaci\xf3n"),(0,i.kt)("p",null,"Cuando llevamos a cabo el mantenimiento, tenemos que encontrar y cambiar las representaciones de las cosas, esas c\xe1psulas de informaci\xf3n incrustadas en la aplicaci\xf3n."),(0,i.kt)("p",null,"El problema es que es f\xe1cil duplicar la informaci\xf3n en las especificaciones, procesos y programas que desarrollamos y, cuando lo hacemos, damos lugar a una pesadilla de mantenimiento, una que empieza mucho antes de que se env\xede la aplicaci\xf3n."),(0,i.kt)("hr",null),(0,i.kt)("p",null,"La \xfanica manera de desarrollar software de manera fiable, y de hacer que nuestros desarrollos sean m\xe1s f\xe1ciles de entender y mantener, es seguir lo que llamamos ",(0,i.kt)("strong",{parentName:"p"},"principio DRY"),"."),(0,i.kt)("p",null,"Cualquier porci\xf3n de informaci\xf3n debe tener una representaci\xf3n \xfanica, inequ\xedvoca y autoritativa dentro de un sistema."),(0,i.kt)("p",null,"La alternativa es tener la misma cosa expresada en dos o m\xe1s lugares."),(0,i.kt)("p",null,"Si se cambia una, hay que recordar cambiar las otras o el programa terminar\xe1 fallando por sus propias contradicciones."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"No es una cuesti\xf3n de si nos vamos a acordar : es una cuesti\xf3n de cu\xe1ndo nos vamos a olvidar.")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"dry-es-m\xe1s-que-c\xf3digo"},"DRY es m\xe1s que c\xf3digo"),(0,i.kt)("p",null,"DRY tiene que ver con la duplicaci\xf3n de la informaci\xf3n, del prop\xf3sito."),(0,i.kt)("p",null,"Tiene que ver con expresar la misma cosa en dos lugares diferentes, posiblemente de dos maneras distintas por completo."),(0,i.kt)("p",null,"Cuando tenemos que cambiar un solo aspecto del c\xf3digo:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\xbf descubrimos que tenemos que hacer ese cambio en m\xfaltiples lugares y en m\xfaltiples formatos diferentes?"),(0,i.kt)("li",{parentName:"ul"},"\xbfTenemos que cambiar el c\xf3digo y la documentaci\xf3n, o un esquema de base de datos y una estructura que lo alberga, o..?"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Si es as\xed ese c\xf3digo no es DRY"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"resumen"},"Resumen"),(0,i.kt)("h3",{id:"principio-dry-dont-repeat-yourself"},"Principio DRY (Don't Repeat Yourself)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El principio DRY se enfoca en reducir la duplicaci\xf3n de c\xf3digo."),(0,i.kt)("li",{parentName:"ul"},"Asegura que cada parte del conocimiento tiene una representaci\xf3n \xfanica y bien definida dentro del sistema."),(0,i.kt)("li",{parentName:"ul"},"Evita la duplicaci\xf3n de esfuerzos y hace que el mantenimiento sea m\xe1s sencillo.")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"principio-etc-easy-to-change"},"Principio ETC (Easy to Change)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El principio ETC busca que el c\xf3digo sea f\xe1cil de modificar."),(0,i.kt)("li",{parentName:"ul"},"Fomenta la modularidad, la desacoplamiento y la responsabilidad \xfanica."),(0,i.kt)("li",{parentName:"ul"},"Facilita la adaptaci\xf3n a cambios en los requisitos y la correcci\xf3n de errores.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"ejemplos-y-aplicaciones"},"Ejemplos y aplicaciones"),(0,i.kt)("h3",{id:"dry"},"DRY"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Utilizar funciones y clases para encapsular comportamientos comunes."),(0,i.kt)("li",{parentName:"ul"},'Utilizar constantes y variables para evitar valores "m\xe1gicos".')),(0,i.kt)("h3",{id:"etc"},"ETC"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Dise\xf1ar interfaces claras y simples entre m\xf3dulos."),(0,i.kt)("li",{parentName:"ul"},"Utilizar patrones de dise\xf1o para facilitar la extensibilidad.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"ejemplo-de-aplicaci\xf3n-de-dry"},"Ejemplo de aplicaci\xf3n de DRY"),(0,i.kt)("p",null,"Supongamos que tenemos el siguiente c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'\nint imprimir_balance(cuenta_t *cuenta) {\n\n    printf("Debitos: %10.2f \\n", cuenta->debitos);\n    printf("Creditos: %10.2f \\n", cuenta->creditos);\n\n    if (cuenta->tarifas < 0) {\n        printf ("Tarifas: %10.2f-\\n", (-1)*cuenta->tarifas)\n    } else {\n        printf ("Tarifas: %10.2f+\\n", cuenta->tarifas)\n    }\n    printf("    ---------------------\\n");\n\n    if (cuenta->balance < 0) {\n        printf ("Balance: %10.2f-\\n", (-1)*cuenta->balance)\n    } else {\n        printf ("Balance: %10.2f+\\n", cuenta->balance)\n    }\n    return 0;\n}\n\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"identificar-la-duplicaci\xf3n-de-c\xf3digo-y-refactorizarlo-para-evitarla"},"Identificar la duplicaci\xf3n de c\xf3digo y refactorizarlo para evitarla"),(0,i.kt)("p",null,"En primer lugar, hay una duplicaci\xf3n clara de tipo cortar y pegar de la gesti\xf3n de los n\xfameros negativos.\nPodemos arreglarlo a\xf1adiendo otra funci\xf3n:"),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'\nvoid imprimir_numero(double numero) {\n    if (numero < 0) {\n        printf("%10.2f-\\n", (-1)*numero);\n    } else {\n        printf("%10.2f+\\n", numero);\n    }\n}\n\nimprimir_balance(cuenta_t *cuenta) {\n    printf("Debitos: ");\n    imprimir_numero(cuenta->debitos);\n    printf("Creditos: ");\n    imprimir_numero(cuenta->creditos);\n    printf("Tarifas: ");\n    imprimir_numero(cuenta->tarifas);\n    printf("    ---------------------\\n");\n    printf("Balance: ");\n    imprimir_numero(cuenta->balance);\n    return 0;\n}\n\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Otra duplicaci\xf3n es la repetici\xf3n del formato de impresi\xf3n del campo en todas las llamadas printf."),(0,i.kt)("p",null,"Podr\xedamos arreglar esto introduciendo una constante y pas\xe1ndola a cada llamada."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'FORMAT_STRING = "%10.2f"'))),(0,i.kt)("p",null,"Pero tambi\xe9n se puede evitar la duplicaci\xf3n refactorizando la propia funci\xf3n existente."),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'\nvoid imprimir_numero(double numero, char *buffer) {\n\n    sprintf(buffer, "%10.2f", numero);\n    if (numero < 0) {\n      sprintf(buffer, "%s-", buffer);\n    } else {\n      sprintf(buffer, "%s+", buffer);\n    }\n}\n\nimprimir_balance(cuenta_t *cuenta) {\n    char buffer[20];\n\n    printf("Debitos: %s\\n", imprimir_numero(cuenta->debitos, buffer));\n    printf("Creditos: %s\\n", imprimir_numero(cuenta->creditos, buffer));\n    printf("Tarifas: %s\\n", imprimir_numero(cuenta->tarifas, buffer));\n    printf("    ---------------------\\n");\n    printf("Balance: %s\\n", imprimir_numero(cuenta->balance, buffer));\n    return 0;\n    \n}\n\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"\xbfAlgo m\xe1s?\n\xbfqu\xe9 pasa si el cliente pide un espacio extra entre las etiquetas y los n\xfameros?"),(0,i.kt)("p",null,"Tendr\xedamos que cambiar cinco l\xedneas."),(0,i.kt)("p",null,"Podemos eliminar tambi\xe9n esa duplicaci\xf3n:"),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'void imprimir_numero(double numero, char *buffer) {\n\n    sprintf(buffer, "%10.2f", numero);\n    if (numero < 0) {\n      sprintf(buffer, "%s-", buffer);\n    } else {\n      sprintf(buffer, "%s+", buffer);\n    }\n}\n\nvoid imprimir_etiqueta(char *etiqueta) {\n    printf("%s: ", etiqueta);\n}\n\nvoid imprimir_linea( char *etiqueta, double numero, char *buffer) {\n    imprimir_etiqueta(etiqueta);\n    imprimir_numero(numero, buffer);\n}\n\n\nimprimir_balance(cuenta_t *cuenta) {\n    char buffer[20];\n\n    imprimir_linea("Debitos", cuenta->debitos, buffer);\n    imprimir_linea("Creditos", cuenta->creditos, buffer);\n    imprimir_linea("Tarifas", cuenta->tarifas, buffer);\n    printf("    ---------------------\\n");\n    imprimir_linea("Balance", cuenta->balance, buffer);\n    return 0;\n}\n')),(0,i.kt)("hr",null))}d.isMDXComponent=!0}}]);