"use strict";(self.webpackChunklenguajes_estructurados=self.webpackChunklenguajes_estructurados||[]).push([[5073],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>m});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var u=r.createContext({}),i=function(e){var t=r.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},l=function(e){var t=i(e.components);return r.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},E=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=i(a),E=n,m=d["".concat(u,".").concat(E)]||d[E]||p[E]||o;return a?r.createElement(m,s(s({ref:t},l),{},{components:a})):r.createElement(m,s({ref:t},l))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=E;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[d]="string"==typeof e?e:n,s[1]=c;for(var i=2;i<o;i++)s[i]=a[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}E.displayName="MDXCreateElement"},9556:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>i});var r=a(7462),n=(a(7294),a(3905));const o={marp:!1,theme:"default",size:969,paginate:!0},s="03.05 -  TicTacToe - Estados",c={unversionedId:"Ejercicios Resueltos/03.05.B_estados",id:"Ejercicios Resueltos/03.05.B_estados",title:"03.05 -  TicTacToe - Estados",description:"Lenguajes Estructurados",source:"@site/docs/03 - Ejercicios Resueltos/03.05.B_estados.md",sourceDirName:"03 - Ejercicios Resueltos",slug:"/Ejercicios Resueltos/03.05.B_estados",permalink:"/lenguajes-estructurados/docs/Ejercicios Resueltos/03.05.B_estados",draft:!1,editUrl:"https://github.com/abelranni/lenguajes-estructurados/tree/main/wewbsite/docs/03 - Ejercicios Resueltos/03.05.B_estados.md",tags:[],version:"current",frontMatter:{marp:!1,theme:"default",size:969,paginate:!0},sidebar:"tutorialSidebar",previous:{title:"03.05 -  TicTacToe",permalink:"/lenguajes-estructurados/docs/Ejercicios Resueltos/03.05.A_tictactoe"},next:{title:"03.05.C_mejoras",permalink:"/lenguajes-estructurados/docs/Ejercicios Resueltos/03.05.C_mejoras"}},u={},i=[{value:"Lenguajes Estructurados",id:"lenguajes-estructurados",level:2},{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Estados",id:"estados",level:2}],l={toc:i},d="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"0305----tictactoe---estados"},"03.05 -  TicTacToe - Estados"),(0,n.kt)("h2",{id:"lenguajes-estructurados"},"Lenguajes Estructurados"),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,n.kt)("p",null,"Diagrama de estados de un juego de TicTacToe."),(0,n.kt)("mermaid",{value:"stateDiagram\n    [*] --\x3e INITIAL: Inicio\n    INITIAL --\x3e SELECT_CHIP: M\xe1s de 5 fichas en el tablero\n    SELECT_CHIP --\x3e MOVE_CHIP: Ficha seleccionada\n    MOVE_CHIP --\x3e SELECT_CHIP: Ficha movida\n    SELECT_CHIP --\x3e END_GAME: Hay ganador\n    MOVE_CHIP --\x3e END_GAME: Hay ganador\n    END_GAME --\x3e [*]: Juego reseteado\n"}),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"estados"},"Estados"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"INITIAL: En este estado, los jugadores est\xe1n colocando sus fichas en el tablero. Cuando hay m\xe1s de 5 fichas en el tablero, el juego pasa al estado SELECT_CHIP."),(0,n.kt)("li",{parentName:"ul"},"SELECT_CHIP: En este estado, un jugador selecciona una de sus fichas para moverla. Si logra seleccionar una ficha, el juego pasa al estado MOVE_CHIP. Si durante este estado se encuentra un ganador, el juego pasa al estado END_GAME."),(0,n.kt)("li",{parentName:"ul"},"MOVE_CHIP: En este estado, el jugador mueve la ficha que ha seleccionado. Una vez que se mueve la ficha, el juego regresa al estado SELECT_CHIP. Si durante este estado se encuentra un ganador, el juego pasa al estado END_GAME."),(0,n.kt)("li",{parentName:"ul"},"END_GAME: Este es el estado final del juego. Una vez que el juego ha terminado, se puede resetear para volver al estado inicial.")))}p.isMDXComponent=!0}}]);