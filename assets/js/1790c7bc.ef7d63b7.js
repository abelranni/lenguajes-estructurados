"use strict";(self.webpackChunklenguajes_estructurados=self.webpackChunklenguajes_estructurados||[]).push([[738],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>b});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=r.createContext({}),u=function(e){var a=r.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},c=function(e){var a=u(e.components);return r.createElement(l.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),p=t,b=d["".concat(l,".").concat(p)]||d[p]||m[p]||o;return n?r.createElement(b,i(i({ref:a},c),{},{components:n})):r.createElement(b,i({ref:a},c))}));function b(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[d]="string"==typeof e?e:t,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6222:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),t=(n(7294),n(3905));const o={marp:!0,theme:"default",size:969,paginate:!0},i="01.02 - Buenas pr\xe1cticas",s={unversionedId:"Introduccion/01.02_buenas_practicas",id:"Introduccion/01.02_buenas_practicas",title:"01.02 - Buenas pr\xe1cticas",description:"Lenguajes Estructurados",source:"@site/docs/01 - Introduccion/01.02_buenas_practicas.md",sourceDirName:"01 - Introduccion",slug:"/Introduccion/01.02_buenas_practicas",permalink:"/lenguajes-estructurados/docs/Introduccion/01.02_buenas_practicas",draft:!1,editUrl:"https://github.com/abelranni/lenguajes-estructurados/tree/main/docs/01 - Introduccion/01.02_buenas_practicas.md",tags:[],version:"current",frontMatter:{marp:!0,theme:"default",size:969,paginate:!0},sidebar:"tutorialSidebar",previous:{title:"01.01 - Programaci\xf3n Estructurada",permalink:"/lenguajes-estructurados/docs/Introduccion/01.01_programacion_estructurada"},next:{title:"02 - Lenguaje C",permalink:"/lenguajes-estructurados/docs/category/02---lenguaje-c"}},l={},u=[{value:"Lenguajes Estructurados",id:"lenguajes-estructurados",level:2},{value:"C\xf3digo limpio",id:"c\xf3digo-limpio",level:2},{value:"Variables y Nombres",id:"variables-y-nombres",level:2},{value:"Nombres pronunciables y expresivos",id:"nombres-pronunciables-y-expresivos",level:2},{value:"Ausencia de informaci\xf3n t\xe9cnica en los nombres",id:"ausencia-de-informaci\xf3n-t\xe9cnica-en-los-nombres",level:2},{value:"L\xe9xico coherente",id:"l\xe9xico-coherente",level:2},{value:"Nombres seg\xfan el tipo de dato",id:"nombres-seg\xfan-el-tipo-de-dato",level:2},{value:"Booleanos",id:"booleanos",level:2},{value:"N\xfameros",id:"n\xfameros",level:2},{value:"Funciones",id:"funciones",level:2},{value:"Tama\xf1o y funci\xf3n",id:"tama\xf1o-y-funci\xf3n",level:2},{value:"N\xfamero de argumentos",id:"n\xfamero-de-argumentos",level:2},{value:"Principio DRY",id:"principio-dry",level:2},{value:"Evitar el uso de comentarios",id:"evitar-el-uso-de-comentarios",level:2}],c={toc:u},d="wrapper";function m(e){let{components:a,...o}=e;return(0,t.kt)(d,(0,r.Z)({},c,o,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"0102---buenas-pr\xe1cticas"},"01.02 - Buenas pr\xe1cticas"),(0,t.kt)("h2",{id:"lenguajes-estructurados"},"Lenguajes Estructurados"),(0,t.kt)("hr",null),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"El costo total de un producto software est\xe1 dado por la suma de los costos de desarrollo y de mantenimiento, siendo este \xfaltimo mucho m\xe1s elevado que el coste del propio desarrollo inicial.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"A su vez el costo de mantenimiento viene dado por la suma de los costos:"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"entender el c\xf3digo existente"),(0,t.kt)("li",{parentName:"ul"},"cambiarlo"),(0,t.kt)("li",{parentName:"ul"},"testearlo"),(0,t.kt)("li",{parentName:"ul"},"desplegarlo en producci\xf3n")))),(0,t.kt)("hr",null),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"bg 90%",src:n(911).Z,width:"1086",height:"543"})),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"c\xf3digo-limpio"},"C\xf3digo limpio"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"El c\xf3digo limpio es aquel que se puede leer y entender f\xe1cilmente, y que se puede modificar f\xe1cilmente sin introducir errores."),(0,t.kt)("li",{parentName:"ul"},"Tratar de entender el c\xf3digo de un tercero, o incluso el que escribimos nosotros mismos hace apenas unas semanas, se puede volver una tarea realmente dif\xedcil. "),(0,t.kt)("li",{parentName:"ul"},"Es por eso que hacer un esfuerzo extra para que nuestra soluci\xf3n sea legible e intuitiva es la base para reducir los costos de mantenimiento del software que producimos.")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"variables-y-nombres"},"Variables y Nombres"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Nuestro c\xf3digo deber\xeda poder leerse con la misma facilidad con la que se lee un texto bien escrito, por eso es fundamental  elegir buenos nombres."),(0,t.kt)("li",{parentName:"ul"},"Los nombres de variables, m\xe9todos y clases deben seleccionarse con cuidado para que den ",(0,t.kt)("strong",{parentName:"li"},"expresividad y significado")," a nuestro c\xf3digo.")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"nombres-pronunciables-y-expresivos"},"Nombres pronunciables y expresivos"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Los nombres deben ser pronunciables, es decir, que no contengan caracteres especiales ni abreviaturas."),(0,t.kt)("li",{parentName:"ul"},"Intentar no ahorrar caracteres en los nombres, la idea es que sean lo m\xe1s expresivos posible.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"// mal\nint d; // d\xedas transcurridos desde la fecha de inicio\n\n// bien\nint diasTranscurridos;\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"ausencia-de-informaci\xf3n-t\xe9cnica-en-los-nombres"},"Ausencia de informaci\xf3n t\xe9cnica en los nombres"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Evitar incluir informaci\xf3n t\xe9cnica en los nombres, ya que puede hacer que el c\xf3digo sea m\xe1s dif\xedcil de entender. Es decir, evitar incluir informaci\xf3n relacionada con la tecnolog\xeda, como el tipo de dato o la notaci\xf3n h\xfangara, el tipo de clase, etc.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"// mal\nstruct AbstractUser { ... };\n\n\n// bien\nstruct User { ... };\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"l\xe9xico-coherente"},"L\xe9xico coherente"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Se debe usar el mismo vocabulario para hacer referencia al mismo concepto, no se deber\xeda usar por ejemplo en algunos lados User, en otro Client y en otro Customer, a no ser que representen claramente conceptos diferentes.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"// mal\ngetUserInfo();\ngetClientData();\ngetCustomerRecord();\n\n// bien\ngetUser();\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"nombres-seg\xfan-el-tipo-de-dato"},"Nombres seg\xfan el tipo de dato"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Los arrays son una lista iterable de elementos, generalmente del mismo tipo. Es por eso que pluralizar el nombre de la variable puede ser una buena idea")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"// mal\nconst fuit = ['apple', 'banana', 'orange'];\n\n// regular\nconst fruit_list = ['apple', 'banana', 'orange'];\n\n// bien\nconst fruits = ['apple', 'banana', 'orange'];\n\n// mejor\nconst fruit_names = ['apple', 'banana', 'orange'];\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"booleanos"},"Booleanos"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Los booleanos solo pueden tener 2 valores: verdadero o falso. El uso de prefijos como ",(0,t.kt)("em",{parentName:"li"},"is, has")," y ",(0,t.kt)("em",{parentName:"li"},"can")," ayudar\xe1 inferir el tipo de variable, mejorando as\xed la legibilidad de nuestro c\xf3digo.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"// mal\nconst open = true;\nconst write = true;\nconst fruit = true;\n\n// bien\nconst isOpen = true;\nconst canWrite = true;\nconst hasFruit = true;\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"n\xfameros"},"N\xfameros"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Para los n\xfameros es interesante elegir prefijos que describan caracter\xedsticas num\xe9ricas de la variable, como min, max o total.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"// mal\nconst fruits = 5;\n\n// bien\nconst maxFruits = 8;\nconst minFruits = 1;\nconst totalFruits = 2;\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"funciones"},"Funciones"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Los nombres de las funciones deben representar acciones, por lo que deben construirse usando el verbo que representa la acci\xf3n, seguido de un sustantivo. Estos deben de ser descriptivos y a la vez concisos. Esto quiere decir que el nombre de la funci\xf3n debe expresar lo que hace, pero tambi\xe9n debe de abstraerse de la implementaci\xf3n de la funci\xf3n.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"// mal\ncreateUserIfNotExists();\nupdateUserIfNotEmpty();\nsendEmailIfFieldIsNotEmpty();\n\n// bien\ncreateUser();\nupdateUser();\nsendEmail();\n")),(0,t.kt)("hr",null),(0,t.kt)("p",null,"En el caso de las funciones de acceso, modificaci\xf3n o predicado, el nombre debe ser el prefijo get, set e is, respectivamente."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-c"},"getUser();\nsetUser(...);\nisValidUser();\n\n")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"tama\xf1o-y-funci\xf3n"},"Tama\xf1o y funci\xf3n"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"La simplicidad es fundamental a la hora de escribir buen c\xf3digo, es por eso que la primera recomendaci\xf3n es que nuestras funciones deben de tener un tama\xf1o reducido."),(0,t.kt)("li",{parentName:"ul"},"Normalmente de suele escribir funciones de 4 o 5 l\xedneas, en algunas ocasiones pueden llegar a 15 o 20 l\xedneas. Casi nunca deben exceder esa cantidad salvo que nos encontremos con una acci\xf3n que no pueda ser dividida."),(0,t.kt)("li",{parentName:"ul"},"Si las funciones de un c\xf3digo tienen un tama\xf1o demasiado grande, es probable que hagan demasiadas cosas. Esto nos lleva a la segunda recomendaci\xf3n y quiz\xe1s la m\xe1s importante: ",(0,t.kt)("strong",{parentName:"li"},"las funciones deben hacer una \xfanica cosa")," y hacerla bien.")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"n\xfamero-de-argumentos"},"N\xfamero de argumentos"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Limitar el n\xfamero de argumentos que recibe una funci\xf3n.\nEn general deber\xedamos limitarnos a tres par\xe1metros como m\xe1ximo. Si una funci\xf3n recibe m\xe1s de tres argumentos, es probable que estemos haciendo algo mal.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"En el caso de tener que exceder este n\xfamero, podr\xeda ser una buena idea a\xf1adir un nivel m\xe1s de indirecci\xf3n a trav\xe9s de una estructura."))),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"principio-dry"},"Principio DRY"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Teniendo en cuenta que la duplicaci\xf3n de c\xf3digo suele ser la ra\xedz de m\xfaltiples problemas, una buena pr\xe1ctica es la implementaci\xf3n del principio DRY (don\u2019t repeat yourself)."),(0,t.kt)("li",{parentName:"ul"},"Este principio, que en espa\xf1ol significa no repetirse, nos evitar\xe1 m\xfaltiples problemas como tener que testear lo mismo varias veces, adem\xe1s de ayudarnos a reducir la cantidad de c\xf3digo a mantener."),(0,t.kt)("li",{parentName:"ul"},"Para eso lo ideal ser\xeda extraer el c\xf3digo duplicado a una funci\xf3n y utilizarlo donde nos haga falta. Muchas veces esta duplicidad no ser\xe1 tan evidente y ser\xe1 nuestra experiencia la que nos ayude a detectarla, y refactorizar el c\xf3digo cada vez que se detecten estas situaciones.")),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"evitar-el-uso-de-comentarios"},"Evitar el uso de comentarios"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Los comentarios son una herramienta que nos permite documentar nuestro c\xf3digo, pero tambi\xe9n pueden ser una fuente de problemas."),(0,t.kt)("li",{parentName:"ul"},"Cuando se necesita a\xf1adir comentarios al c\xf3digo es porque \xe9ste no es lo suficientemente autoexplicativo, lo cual quiere decir que no se est\xe1n eligiendo buenos nombres."),(0,t.kt)("li",{parentName:"ul"},"Cuando surja la necesidad de escribir un comentario, antes hay que tratar de refactorizar el c\xf3digo y/o nombrar los elementos del mismo de otra manera."),(0,t.kt)("li",{parentName:"ul"},"Lo importante es ",(0,t.kt)("strong",{parentName:"li"},"comentar el ",(0,t.kt)("inlineCode",{parentName:"strong"},"por qu\xe9"),", m\xe1s que comentar el ",(0,t.kt)("inlineCode",{parentName:"strong"},"qu\xe9")," o el ",(0,t.kt)("inlineCode",{parentName:"strong"},"c\xf3mo")),". Ya que el ",(0,t.kt)("inlineCode",{parentName:"li"},"c\xf3mo")," lo vemos, es el c\xf3digo; y el ",(0,t.kt)("inlineCode",{parentName:"li"},"qu\xe9")," no deber\xeda ser necesario si se escribe c\xf3digo autoexplicativo."),(0,t.kt)("li",{parentName:"ul"},"Pero el ",(0,t.kt)("inlineCode",{parentName:"li"},"por qu\xe9")," se decidi\xf3 resolver algo de cierta manera sabiendo de que resulta extra\xf1o, eso s\xed deber\xeda ser explicado.")))}m.isMDXComponent=!0},911:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/esquema-de-costos-e76e00bac3970df2c30d52a55a465f63.jpg"}}]);