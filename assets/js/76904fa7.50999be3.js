"use strict";(self.webpackChunklenguajes_estructurados=self.webpackChunklenguajes_estructurados||[]).push([[9891],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>g});var l=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,l,r=function(e,a){if(null==e)return{};var n,l,r={},t=Object.keys(e);for(l=0;l<t.length;l++)n=t[l],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(l=0;l<t.length;l++)n=t[l],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=l.createContext({}),c=function(e){var a=l.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},u=function(e){var a=c(e.components);return l.createElement(s.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},m=l.forwardRef((function(e,a){var n=e.components,r=e.mdxType,t=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||t;return n?l.createElement(g,i(i({ref:a},u),{},{components:n})):l.createElement(g,i({ref:a},u))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var t=n.length,i=new Array(t);i[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<t;c++)i[c]=n[c];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4100:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var l=n(7462),r=(n(7294),n(3905));const t={marp:!0,theme:"default",size:969,paginate:!0},i="03.03.B - Snake en Python",o={unversionedId:"Ejercicios Resueltos/03.03.B_snake_py",id:"Ejercicios Resueltos/03.03.B_snake_py",title:"03.03.B - Snake en Python",description:"Lenguajes Estructurados",source:"@site/docs/03 - Ejercicios Resueltos/03.03.B_snake_py.md",sourceDirName:"03 - Ejercicios Resueltos",slug:"/Ejercicios Resueltos/03.03.B_snake_py",permalink:"/lenguajes-estructurados/docs/Ejercicios Resueltos/03.03.B_snake_py",draft:!1,editUrl:"https://github.com/abelranni/lenguajes-estructurados/tree/main/docs/03 - Ejercicios Resueltos/03.03.B_snake_py.md",tags:[],version:"current",frontMatter:{marp:!0,theme:"default",size:969,paginate:!0},sidebar:"tutorialSidebar",previous:{title:"03.03.A - Juego de Snake en C",permalink:"/lenguajes-estructurados/docs/Ejercicios Resueltos/03.03.A_snake"},next:{title:"03.05 -  TicTacToe",permalink:"/lenguajes-estructurados/docs/Ejercicios Resueltos/03.05_tictactoe"}},s={},c=[{value:"Lenguajes Estructurados",id:"lenguajes-estructurados",level:2},{value:"Objetivo del ejercicio",id:"objetivo-del-ejercicio",level:2},{value:"Instalaci\xf3n",id:"instalaci\xf3n",level:2},{value:"Programaci\xf3n orientada a objetos",id:"programaci\xf3n-orientada-a-objetos",level:2},{value:"Mejoras",id:"mejoras",level:3},{value:"Programacion Estructurada",id:"programacion-estructurada",level:2},{value:"PyGame",id:"pygame",level:2},{value:"Funciones espec\xedficas utilizadas",id:"funciones-espec\xedficas-utilizadas",level:2},{value:"move_ip",id:"move_ip",level:3},{value:"colliderect",id:"colliderect",level:3}],u={toc:c},d="wrapper";function p(e){let{components:a,...n}=e;return(0,r.kt)(d,(0,l.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0303b---snake-en-python"},"03.03.B - Snake en Python"),(0,r.kt)("h2",{id:"lenguajes-estructurados"},"Lenguajes Estructurados"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"objetivo-del-ejercicio"},"Objetivo del ejercicio"),(0,r.kt)("p",null,"Crear un programa en Python que simule un tablero de juego de Snake y comparar las estrategias de implementaci\xf3n en relaci\xf3n al programa en C realizado anteriormente.\nEl lenguaje python puede considerarse multi-paradigma, ya que permite programar en forma estructurada, orientada a objetos y funcional.\nEsto nos permite implementar el juego de Snake con programci\xf3n estructurada y orientada a objetos, y comparar luego las estrategias de implementaci\xf3n."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"instalaci\xf3n"},"Instalaci\xf3n"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Instalaci\xf3n de Pygame:\nAbrir la terminal y ejecutar el siguiente comando:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pygame\n")),(0,r.kt)("h2",{id:"programaci\xf3n-orientada-a-objetos"},"Programaci\xf3n orientada a objetos"),(0,r.kt)("p",null,"Comenzaremos con una implementaci\xf3n orientada a objetos, que es la m\xe1s com\xfan en Python. En este caso, vamos a crear una clase Snake que represente a la serpiente en el juego, y una clase Fruit que represente a la fruta."),(0,r.kt)("hr",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Importaci\xf3n de bibliotecas y configuraci\xf3n de variables:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import pygame\nimport sys\nimport random\n\n# Configuraci\xf3n inicial\npygame.init()\nclock = pygame.time.Clock()\n\n# Tama\xf1o de la ventana y de los bloques\ncell_size = 20\ncell_number = 20\nscreen = pygame.display.set_mode((cell_number * cell_size, cell_number * cell_size))\n\n# Colores\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\nWHITE = (255, 255, 255)\n")),(0,r.kt)("hr",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creaci\xf3n de clases Snake y Fruit")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Snake:\n    def __init__(self):\n        self.body = [pygame.Rect(5, 5, cell_size, cell_size)]\n        self.direction = pygame.Vector2(1, 0)\n\n    def draw(self):\n        for segment in self.body:\n            pygame.draw.rect(screen, GREEN, segment)\n\n    def move(self):\n        new_head = self.body[0].copy()\n        new_head.move_ip(self.direction * cell_size)\n        self.body.insert(0, new_head)\n        self.body.pop()\n\nclass Fruit:\n    def __init__(self):\n        self.randomize()\n\n    def draw(self):\n        pygame.draw.rect(screen, RED, self.rect)\n\n    def randomize(self):\n        x = random.randint(0, cell_number - 1) * cell_size\n        y = random.randint(0, cell_number - 1) * cell_size\n        self.rect = pygame.Rect(x, y, cell_size, cell_size)\n\n")),(0,r.kt)("hr",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creaci\xf3n de instancias de las clases y bucle principal del juego")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"snake = Snake()\nfruit = Fruit()\n\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_UP:\n                snake.direction = pygame.Vector2(0, -1)\n            if event.key == pygame.K_DOWN:\n                snake.direction = pygame.Vector2(0, 1)\n            if event.key == pygame.K_LEFT:\n                snake.direction = pygame.Vector2(-1, 0)\n            if event.key == pygame.K_RIGHT:\n                snake.direction = pygame.Vector2(1, 0)\n\n    screen.fill(WHITE)\n    snake.move()\n    snake.draw()\n    fruit.draw()\n\n    if snake.body[0].colliderect(fruit.rect):\n        fruit.randomize()\n\n    pygame.display.update()\n    clock.tick(10)\n\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Este c\xf3digo crea un juego b\xe1sico de Snake en Python. A continuaci\xf3n, se explica cada paso:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Instalar e importar Pygame y otras bibliotecas necesarias."),(0,r.kt)("li",{parentName:"ul"},"Configurar el tama\xf1o de la ventana, los colores y las variables iniciales."),(0,r.kt)("li",{parentName:"ul"},"Crear las clases Snake y Fruit, que representan a la serpiente y a la fruta en el juego. Estas clases tienen m\xe9todos para dibujar sus elementos en la pantalla y actualizar sus posiciones."),(0,r.kt)("li",{parentName:"ul"},"Crear instancias de las clases Snake y Fruit, e inicializar el bucle principal del juego. El bucle principal maneja eventos como el cierre de la ventana y las entradas del teclado. Adem\xe1s, controla el movimiento y la detecci\xf3n de colisiones entre la serpiente y la fruta.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"mejoras"},"Mejoras"),(0,r.kt)("p",null,"Ahora se puede mejorar el juego agregando algunas funciones adicionales, como el crecimiento de la serpiente al comer la fruta y la detecci\xf3n de colisiones con las paredes o con su propio cuerpo."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Mejorar el m\xe9todo move de la clase Snake y agregar la funci\xf3n check_collisions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Snake:\n    # ...\n\n    def move(self):\n        new_head = self.body[0].copy()\n        new_head.move_ip(self.direction * cell_size)\n        self.body.insert(0, new_head)\n        if new_head.colliderect(fruit.rect):\n            fruit.randomize()\n        else:\n            self.body.pop()\n\n    def check_collisions(self):\n        head = self.body[0]\n        if head.x < 0 or head.y < 0 or head.x >= cell_number * cell_size or head.y >= cell_number * cell_size:\n            return True\n        for segment in self.body[1:]:\n            if head.colliderect(segment):\n                return True\n        return False\n\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Mejorar el bucle principal para incluir la detecci\xf3n de colisiones y reiniciar el juego si es necesario:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# ...\n\nwhile True:\n    for event in pygame.event.get():\n        # ... (event handling)\n\n    screen.fill(WHITE)\n    snake.move()\n    snake.draw()\n    fruit.draw()\n\n    if snake.check_collisions():\n        snake = Snake()  # Reiniciar la serpiente\n\n    pygame.display.update()\n    clock.tick(10)\n\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Con estos cambios, ahora el juego detecta si la serpiente choca contra las paredes o contra s\xed misma y reinicia la serpiente si es necesario. Adem\xe1s, la serpiente crecer\xe1 al comer la fruta en lugar de simplemente moverse."),(0,r.kt)("p",null,"Ahora tenemos un juego de Snake b\xe1sico pero funcional en Python con Pygame. Se puede continuar mejorando y personalizando el juego agregando m\xe1s caracter\xedsticas, como marcadores, niveles de dificultad, animaciones y sonidos."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"programacion-estructurada"},"Programacion Estructurada"),(0,r.kt)("p",null,"En esta versi\xf3n, debemos eliminar las clases y en su lugar hay que usar funciones y variables globales para gestionar la l\xf3gica del juego.\nLas funciones draw_rect, move_snake, randomize_fruit y check_collisions realizan las tareas que antes eran parte de las clases Snake y Fruit.\nEl bucle principal sigue siendo similar, pero ahora llama a estas funciones en lugar de utilizar m\xe9todos de las clases."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Algunas ideas para mejorar el juego:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Agregar un sistema de puntuaci\xf3n: llevar la cuenta de la puntuaci\xf3n del jugador, que podr\xeda ser la longitud de la serpiente o la cantidad de frutas consumidas, y mostrarla en la pantalla usando Pygame.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Aumentar la velocidad del juego con el tiempo: hacer que el juego sea m\xe1s desafiante incrementando la velocidad a medida que la serpiente crece o seg\xfan la puntuaci\xf3n del jugador."))),(0,r.kt)("hr",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Agregar niveles de dificultad: implementar diferentes niveles de dificultad modificando factores como el tama\xf1o de la celda, la velocidad inicial o las condiciones del juego (por ejemplo, obst\xe1culos en la pantalla).")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Agregar sonidos y animaciones: agregar sonidos y animaciones para mejorar la experiencia del jugador. Por ejemplo, se podr\xeda agregar un sonido cuando la serpiente come una fruta, o una animaci\xf3n cuando la serpiente choca contra una pared o contra su propio cuerpo.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"pygame"},"PyGame"),(0,r.kt)("p",null,"Pygame es una biblioteca de Python que se basa en Simple DirectMedia Layer (SDL), una biblioteca de desarrollo de videojuegos multiplataforma escrita en C. SDL proporciona acceso de bajo nivel a elementos como audio, teclado, rat\xf3n y gr\xe1ficos a trav\xe9s de OpenGL y Direct3D."),(0,r.kt)("p",null,'Pygame act\xfaa como un "wrapper" o envoltorio alrededor de SDL, lo que significa que utiliza y se comunica con SDL para manejar gr\xe1ficos, audio, eventos de entrada y otras funcionalidades relacionadas con el desarrollo de videojuegos y aplicaciones multimedia.'),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Al utilizar Pygame, los desarrolladores de Python pueden aprovechar las capacidades de SDL a trav\xe9s de una interfaz m\xe1s simple y orientada a objetos, espec\xedficamente dise\xf1ada para Python."),(0,r.kt)("p",null,"La combinaci\xf3n de SDL y Pygame permite a los desarrolladores de Python crear juegos y aplicaciones multimedia de una manera m\xe1s r\xe1pida y f\xe1cil, sin tener que lidiar con la complejidad y las particularidades de las APIs de bajo nivel y la programaci\xf3n en C."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"funciones-espec\xedficas-utilizadas"},"Funciones espec\xedficas utilizadas"),(0,r.kt)("h3",{id:"move_ip"},"move_ip"),(0,r.kt)("p",null,'La funci\xf3n move_ip es un m\xe9todo de la clase Rect en la biblioteca Pygame. Esta funci\xf3n se utiliza para mover un rect\xe1ngulo en su lugar, cambiando sus atributos x e y por un desplazamiento dado en las coordenadas (x, y). La funci\xf3n move_ip toma dos argumentos, dx y dy, que representan el desplazamiento en el eje x y en el eje y, respectivamente. El sufijo _ip en el nombre del m\xe9todo indica que se trata de una operaci\xf3n "in place", lo que significa que modifica el objeto rect\xe1ngulo directamente en lugar de devolver un nuevo rect\xe1ngulo.'),(0,r.kt)("hr",null),(0,r.kt)("p",null,"En el ejemplo del juego Snake, usamos move_ip para actualizar la posici\xf3n de la cabeza de la serpiente en funci\xf3n de su direcci\xf3n actual. Aqu\xed hay un fragmento del c\xf3digo donde se utiliza move_ip:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"new_head = snake[0].copy()\nnew_head.move_ip(direction * cell_size)\n\n")),(0,r.kt)("p",null,"En este fragmento, primero copiamos el rect\xe1ngulo que representa la cabeza de la serpiente (snake","[0]",") y luego aplicamos move_ip en la copia new_head. El desplazamiento en x e y se calcula multiplicando el vector de direcci\xf3n por el tama\xf1o de la celda. Finalmente, insertamos new_head en la lista snake como el nuevo primer elemento, que se convierte en la nueva cabeza de la serpiente."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"colliderect"},"colliderect"),(0,r.kt)("p",null,"La funci\xf3n colliderect es otro m\xe9todo de la clase Rect en la biblioteca Pygame. Este m\xe9todo se utiliza para determinar si dos rect\xe1ngulos se est\xe1n superponiendo (colisionando) o no. La funci\xf3n colliderect toma un \xfanico argumento, que es otro objeto Rect, y devuelve True si ambos rect\xe1ngulos tienen una intersecci\xf3n no vac\xeda, es decir, si est\xe1n colisionando. Si no hay intersecci\xf3n entre los rect\xe1ngulos, devuelve False."),(0,r.kt)("p",null,"En el ejemplo del juego Snake, usamos colliderect para verificar si la cabeza de la serpiente ha colisionado con la fruta y, en la funci\xf3n check_collisions, para verificar si la cabeza de la serpiente ha colisionado con su propio cuerpo. Aqu\xed tienes un fragmento de c\xf3digo donde se utiliza colliderect:"),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"if new_head.colliderect(fruit):\n    fruit.randomize()\n\n")),(0,r.kt)("p",null,"En este fragmento, comprobamos si el rect\xe1ngulo new_head, que representa la nueva posici\xf3n de la cabeza de la serpiente, colisiona con el rect\xe1ngulo fruit.rect, que representa la fruta. Si colliderect devuelve True, significa que la serpiente ha comido la fruta, y llamamos a la funci\xf3n randomize para reposicionar la fruta en una nueva ubicaci\xf3n aleatoria."))}p.isMDXComponent=!0}}]);